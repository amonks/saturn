{"version":3,"sources":["analyst.js"],"names":[],"mappings":";;;;;;AAIA,MAAM,CAAC,OAAO,GAAG,YAAY;;AAE3B,MAAI,GAAG,GAAG,EAAE,CAAA;;;AAGZ,KAAG,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE;AAC5B,QAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;;;;;;;;;;;;;;;;;;AACnB,YAAI,QAAQ,GAAG;AACb,eAAK,EAAE,IAAI,CAAC,MAAM;AAClB,cAAI,EAAE,EAAE;AACR,cAAI,EAAE,EAAE;AACR,iBAAO,0BAAE;gGACE,GAAG;;;;;;;;;8BAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;;;;;;;;AAAjC,qBAAG;;yBACJ,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAE3B,CAAA;SACF,CAAA;;;;;;;;AAGD,4BAAkB,IAAI,2HAAE;gBAAf,KAAK;;AACZ,gBAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAA;AACnB,gBAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACtB,sBAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAA;aACxD,MAAM;AACL,sBAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;AACnB,mBAAG,EAAE,GAAG;AACR,qBAAK,EAAE,CAAC;eACT,CAAA;AACD,sBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACxB;WACF;;;;;;;;;;;;;;;;;;;;;;;AAGD,4BAAgB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,2HAAE;gBAAnC,GAAG;;AACV,gBAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AAC9B,iBAAK,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;WAClE;;;;;;;;;;;;;;;;AACD;aAAO,QAAQ;UAAA;;;;KAChB;GACF,CAAA;AACD,SAAO,GAAG,CAAA;CACX,CAAA","file":"analyst.js","sourcesContent":["// main.js\n\n/* global JSON */\n\nwindow.Analyst = function () {\n\n  let API = {}\n\n  // main function\n  API.analyze = function (data) {\n    if (data.length > 0) {\n      let analysis = {\n        total: data.length,\n        data: {},\n        tags: [],\n        entries: function * () {\n          for (let key of Object.keys(analysis.data)) {\n            yield analysis.data[key]\n          }\n        }\n      }\n\n      // populate data object and tags array\n      for (let datum of data) {\n        let tag = datum.tag\n        if (analysis.data[tag]) {\n          analysis.data[tag].count = analysis.data[tag].count + 1\n        } else {\n          analysis.data[tag] = {\n            tag: tag,\n            count: 1\n          }\n          analysis.tags.push(tag)\n        }\n      }\n\n      // add percentages\n      for (let key of Object.keys(analysis.data)) {\n        let datum = analysis.data[key]\n        datum.percentage = Math.round(100 * datum.count / analysis.total)\n      }\n      return analysis\n    }\n  }\n  return API\n}\n"],"sourceRoot":"/source/"}